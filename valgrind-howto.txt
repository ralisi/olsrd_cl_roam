Valgrind is a powerful tool for performance and correctness analysis of code.
This mini-howto discusses how to set your development environment up,
such that you can profile or leakcheck a running olsr daemon and later analyze its
recordings using a graphical frontend called Kcachegrind.

First change your makefile.inc such that the debug symbols are not removed after
compilation

    # set DEBUG to 1 to add debugger symbols to olsrd and filename/linenumbers to logging
    # set DEBUG to 0 to remove both and optimize olsrd for size
    DEBUG ?= 1

    # set to 1 to remove a severity level of logging from olsrd
    NO_LOG_DEBUG ?= 0
    NO_LOG_INFO  ?= 0
    NO_LOG_WARN  ?= 0
    NO_LOG_ERROR ?= 0

valgrind for profiling:

  run valgrind with the following command line options.

  valgrind --tool=callgrind -v --dump-instr=yes --trace-jump=yes ./olsrd -d 0 -nofork

  Finally load kcachgrind to display the profiling data. (watch out the callgrind
  data are written with a umask of 600 as user root - so you may want to chown or
  chmod the file, otherwise kcachegrind cannot open your data and will display an
  empty screen)

valgrind for memory checking:

  valgrind --tool=memcheck --leak-check=full --show-reachable=yes ./olsrd --nofork -f /etc/olsrd.conf -d 0
