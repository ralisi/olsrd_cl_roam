<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article id="olsrd_manpages" lang="en">
  <title>Unik OLSRD Man Pages</title>

  <articleinfo>
    <titleabbrev>Olsrd Man Pages</titleabbrev>

    <releaseinfo>Version 0.5.7-pre</releaseinfo>

    <authorgroup>
      <author>
        <firstname>Sven-Ola</firstname>

        <surname>Tücke</surname>

        <email>sven-olaægmx.de</email>
      </author>
    </authorgroup>

    <abstract>
      <para>Source for <productname>olsrd</productname> man pages and other
      materials</para>
    </abstract>
  </articleinfo>

  <para>This document contains sources for man pages and other materials. They
  where converted from the original man page files which are maintained by
  Andreas Tønnesen until 2005. Because the 0.5.7 version of
  <productname>olsrd</productname> introduces several configuration changes
  and removes old configuration options, a re-write was necessary in late
  2008.</para>

  <para>To process this file and convert the included man pages, use the
  <ulink url="http://docbook2x.sourceforge.net/">docbook2X</ulink> tool
  kit.</para>

  <procedure>
    <step>
      <para>Install docbook2X: <command>sudo apt-get install
      docbook2x</command></para>
    </step>

    <step>
      <para>Install the XML DTD: <command>sudo apt-get install
      docbook-xml</command></para>
    </step>

    <step>
      <para>Run the converter: <command>cd ./files &amp;&amp;
      make</command></para>
    </step>

    <step>
      <para>To convert the HISTORY: <command>man -l olsrd-history.5 &gt;
      ../HISTORY</command></para>
    </step>

    <step>
      <para>To generate HTML: <command>make index.html</command></para>
    </step>
  </procedure>

  <refentry id="olsrd_8">
    <indexterm>
      <primary><productname>olsrd</productname></primary>
    </indexterm>

    <refentryinfo>
      <titleabbrev><productname>olsrd</productname> Optimized Link State
      Routing Protocol Daemon</titleabbrev>

      <authorgroup>
        <author>
          <firstname>Sven-Ola</firstname>

          <surname>Tücke</surname>

          <email>sven-olaægmx.de</email>
        </author>

        <author>
          <firstname>Andreas</firstname>

          <surname>Tønnesen</surname>

          <email>andretoæolsr.org</email>
        </author>
      </authorgroup>
    </refentryinfo>

    <refmeta>
      <refentrytitle id="olsrd_8-title">olsrd</refentrytitle>

      <manvolnum>8</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>olsrd</refname>

      <refpurpose>Optimized Link State Routing protocol daemon</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <para><cmdsynopsis>
          <command>olsrd</command>

          <group>
            <arg>-h</arg>

            <arg>--help</arg>
          </group>

          <group>
            <arg>-v</arg>

            <arg>--version</arg>
          </group>

          <group choice="req">
            <arg>-f</arg>

            <arg>--config</arg>

            <replaceable>configfile</replaceable>
          </group>

          <group choice="req">
            <arg>-d</arg>

            <arg>--DebugLevel</arg>

            <replaceable>level</replaceable>
          </group>

          <group>
            <arg>-n</arg>

            <arg>--nofork</arg>
          </group>

          <group>
            <arg>-X</arg>

            <arg>--dispin</arg>
          </group>

          <group>
            <arg>-O</arg>

            <arg>--dispout</arg>
          </group>

          <group>
            <arg>-D</arg>

            <arg>--delgw</arg>
          </group>

          <group>
            <arg>-P</arg>

            <arg>--ipc</arg>
          </group>

          <group choice="req">
            <arg>-H</arg>

            <arg>--hemu</arg>

            <replaceable>ipaddr</replaceable>
          </group>

          <arg>interface1</arg>

          <arg rep="repeat">interface2</arg>
        </cmdsynopsis></para>

      <para><emphasis role="strong">Note</emphasis>: Only if
      <productname>olsrd</productname> is started without arguments, the
      default config file is loaded - which is usually
      <filename>/etc/olsrd.conf</filename> or
      <filename>/usr/local/etc/olsrd.conf</filename>.</para>
    </refsynopsisdiv>

    <refsect1>
      <title>Description</title>

      <para>The <productname>olsrd</productname> daemon is an implementation
      of the <emphasis>O</emphasis>ptimized <emphasis>L</emphasis>ink
      <emphasis>S</emphasis>tate <emphasis>R</emphasis>outing protocol (OLSR)
      for <emphasis>M</emphasis>obile <emphasis>A</emphasis>d-hoc
      <emphasis>NET</emphasis>works (MANETs). The protocol is described in
      RFC3626. It is designed to be run as a standalone server process - but
      as it is still in an experimental stage most users will prefer running
      it with some debug output.</para>

      <para>This implementation of the OLSR protocol features an alternative
      routing scheme based on link quality using an ETX-like metric which was
      initially developed by the c-base community in Berlin and extended by
      the Funkfeuer community in Vienna. This alternative routing scheme uses
      non-standard messages and is therefore incompatible to standard OLSR as
      it is described in the RFC. To switch back to RFC-mode, you need to
      enable a (currently unavailable) metrics plugin using the
      <option>LinkQualityAlgorithm</option> option (see <xref
      endterm="olsrd_conf_5-title" linkend="olsrd_conf_5" />).</para>

      <para>The home page of <productname>olsrd</productname> is <ulink
      url="http://www.olsr.org">http://www.olsr.org</ulink></para>
    </refsect1>

    <refsect1>
      <title>Getting Started</title>

      <para>Running and maintaining a larger mesh network is a complex task.
      Nevertheless, you may simply want to test
      <productname>olsrd</productname>. If you have at least 3 devices, all
      equipped with a WLAN card, the following short list of steps may
      help.</para>

      <orderedlist>
        <listitem>
          <para>Set up the necessary connectivity. Configure all WLAN cards to
          Ad hoc (IBSS) or similar, use same ESSID and channel setting. All
          WLAN cards need to use a fixed IP in the same IP address range (e.g.
          10.0.0.0/8). Verify, that the interfaces are configured with the
          correct broadcast address. Otherwise you will experience ARP lookups
          on the broadcast address when running
          <productname>olsrd</productname>. Also stop any firewalling and
          enable forwarding. Test the connectivity by using the
          <command>ping</command> command. Remember:
          <productname>olsrd</productname> is a layer 3 routing daemon and
          therefore simply is not responsible for any layer 2 problems. No
          ping - no routes.</para>
        </listitem>

        <listitem>
          <para>Install <productname>olsrd</productname> on every device. This
          is different for several supported operating systems:</para>

          <variablelist>
            <varlistentry>
              <term>Linux</term>

              <listitem>
                <para>Download a stable source tar.gz. Unpack. Be sure to
                install the build tools (e.g. <command>apt-get install
                build-essential flex bison</command>). Do <command>make
                build_all</command>. Do <command>sudo make
                install_all</command>. Edit the
                <filename>/usr/local/etc/olsrd.conf</filename> file and change
                at least the <option>Interface</option> section for your WLAN
                card. You may also want to enable the httpinfo plugin. Start
                with <command>olsrd -f /usr/local/etc/olsrd.conf -d
                1</command>.</para>

                <para>You may add <option>PREFIX=/usr</option> to the
                <command>make</command> commands which changes the
                installation pathes to <filename>/etc</filename>,
                <filename>/usr/sbin</filename>, and
                <filename>/usr/lib</filename> as it is the default with
                previous <productname>olsrd</productname> versions.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Windows</term>

              <listitem>
                <para>Download the Windows installer. Install and run the
                <filename>Switch.exe</filename> GUI as admin. Select the WLAN
                card and de-select any other interface offered. Click the
                <guibutton>Start</guibutton> button. Keep in mind: only a user
                with admin rights can change the routing table. Because a
                personal operating system is optimize to give you a maximum of
                security and convenience. As a consequence, it does not
                support cooperation too well. To cooperate, disable at least
                any active firewall solution on the WLAN card to enable
                forwarding for others. For security, disable all protocols and
                services for the WLAN card with the exception of basic
                TCP/IP.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>BSD</term>

              <listitem>
                <para>Basically use the same procedure as with Linux. You need
                to install and use the <command>gmake</command> command to
                build and install.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Embedded:</term>

              <listitem>
                <para>Your mileage may vary with different embedded firmwares
                and operating systems. You may flash the Freifunk Firmware.
                DD-WRT has <productname>olsrd</productname> support. OpenWrt
                comes with a pre-compiled binary for
                <productname>olsrd</productname>. There is an ongoing
                OpenWrt/Kamikaze project with <productname>olsrd</productname>
                named ffluci. Installation and configuration is different for
                those Linux flavours - be sure to read their docs or online
                help files.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>

        <listitem>
          <para>If <productname>olsrd</productname> detects the correct
          topology as well as installs/removes routes matching that topology,
          you may offer Internet on one of your devices. Either enable a
          manual <quote>HNA { 0.0.0.0 0.0.0.0 }</quote> in the configuration
          file or use the dyn_gw or dyn_gw_plain plugins. For most Internet
          connections, you need to enable NAT/MASQUERADING to translate the
          private IP addresses to the globally valid IP address on the
          Internet gateway device.</para>
        </listitem>

        <listitem>
          <para>Start debugging if necessary. Use the <ulink
          url="http://localhost:8080/">http://localhost:8080/</ulink> URL to
          query information from the httpinfo plugin. Use
          <command>wireshark</command> or <command>tcpdump -ni [iface] udp and
          port 698</command> to verify OLSR messaging. Take special care for
          the WLAN cards in Ad hoc / IBSS mode: typical driver/card
          combinations tend to disagree about the auto-negotiated BSSID over
          time (also called IBSS-split) which may be solved by using a
          manually configured BSSID.</para>
        </listitem>
      </orderedlist>
    </refsect1>

    <refsect1>
      <title>Options</title>

      <para>You can specify options either on the command line or by using a
      config file - usually <filename>/etc/olsrd.conf</filename> or
      <filename>/usr/local/etc/olsrd.conf</filename>. The getopt parser
      replaces the <option>--config</option> option with options acquired in
      from the specified config file. While it is possible to operate using
      only command line options, you may want a config file especially for
      readability of the larger config options (e.g. <option>Interface { ...
      }</option> or <option>LoadPlugin { ... }</option> option blocks). To
      preset a config file setting, add an option before
      <option>--config</option>. To overwrite a config file setting, add an
      option after <option>--config</option>.</para>

      <para>The following list summarizes options frequently specified on the
      command line. If you use one or more command line options, you normally
      also have to specify <option>--config</option> for the desired config
      file.</para>

      <variablelist>
        <varlistentry>
          <term><option>-h</option> or <option>--help</option></term>

          <listitem>
            <para>Prints out the list of valid command line / config file
            options and exits.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-v</option> or <option>--version</option></term>

          <listitem>
            <para>Prints out the current version number and exits.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-f <replaceable>configfile</replaceable></option> or
          <option>--config
          <replaceable>configfile</replaceable></option></term>

          <listitem>
            <para>Reads in the specified config file. The acquired options are
            inserted into the command line at the position of the
            <option>-f</option> or <option>--config</option> option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-d level</option> or <option>--DebugLevel
          <replaceable>level</replaceable></option></term>

          <listitem>
            <para>Specifies the amount of debug information to be printed out
            during operation. If set to 0, <productname>olsrd</productname>
            will run in the background.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-n</option> or <option>--nofork</option></term>

          <listitem>
            <para>This option causes <productname>olsrd</productname> not to
            fork into the background, even when started with
            <option>--DebugLevel 0</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-X</option> or <option>--dispin</option></term>

          <listitem>
            <para>This option causes <productname>olsrd</productname> to
            display all incoming packet data.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-O</option> or <option>--dispout</option></term>

          <listitem>
            <para>This option causes <productname>olsrd</productname> to
            display all outgoing packet data.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-D</option> or <option>--delgw</option></term>

          <listitem>
            <para>This option will remove a static default route when
            <productname>olsrd</productname> adds an Internet route based on
            OLSR routing.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-P</option> or <option>--ipc</option></term>

          <listitem>
            <para>This option allows the GUI front end to create one
            connection to <productname>olsrd</productname> at runtime.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-i</option></term>

          <listitem>
            <para>Ignored for compatibility - older versions of
            <productname>olsrd</productname> expect one or more interface
            names after this option (see below).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-L options</option> or
          <option>--log=options</option></term>

          <listitem>
            <para>This option controls the output of the logging system of
            olsrd. The options are a comma-separated string of keys and
            key/value pairs. Activating a lower level logging output (DEBUG,
            WARN, INFO, ERROR) will automatically activate all higher level
            outputs of the source too. All error messages will be activated
            unless one or multiple log sources are specified for error logging
            level.</para>

            <variablelist>
              <varlistentry>
                <term><option>list</option></term>

                <listitem>
                  <para>lists all implemented log sources and log targets.
                  <productname>olsrd</productname> terminates after displaying
                  this values.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>stderr</option></term>

                <listitem>
                  <para>activates stderr as a logging target. If no target is
                  activated, stderr is considered the default target.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>syslog</option></term>

                <listitem>
                  <para>activates the syslog as a logging target.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>file=[filename]</option></term>

                <listitem>
                  <para>activates a user specified file as a logging target.
                  All logging output will be appended to the file.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>debug=[logsource1/logsource2/...]</option></term>

                <listitem>
                  <para>activates the debug output for a number of logfiles.
                  Debugging output will display lots of internal information
                  about a logging source, so be careful to activate too many
                  sources. If not specified, debug output is switched
                  off.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>info=[logsource1/logsource2/...]</option></term>

                <listitem>
                  <para>activates information output for a number of logfiles.
                  Information output will display a small amount of data about
                  the log source. If not specified, information output is
                  switched off.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>warn=[logsource1/logsource2/...]</option></term>

                <listitem>
                  <para>activates warnings for a number of logfiles. Warnings
                  are generated when an error has happened within the logging
                  source, but <productname>olsrd</productname> can recover
                  from the problem and continue to run. If not specified,
                  warning output is switched off.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>error=[logsource1/logsource2/...]</option></term>

                <listitem>
                  <para>activates errors for a number of logfiles. Most errors
                  are generated if an unrecoverable problem happens, so
                  <productname>olsrd</productname> will shut down most times
                  after an error. If not specified, error output is
                  activated.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option><replaceable>interface1</replaceable>
          interface2...</option></term>

          <listitem>
            <para>Any character combination without a leading dash is
            interpreted as a list of interfaces. The list specifies on what
            network interfaces <productname>olsrd</productname> should run.
            Only the main IP address of an interface is evaluated, so you
            cannot specify an interface alias such as eth0:1. Note, that you
            also cannot change the interface parameters such as intervals and
            validity times. Use the <option>Interface { ... }</option> option
            block instead.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>

    <refsect1>
      <title>Files</title>

      <simplelist type="vert">
        <member><filename><?install-datadir ?>/etc/olsrd.conf</filename></member>
      </simplelist>
    </refsect1>

    <refsect1>
      <title>See Also</title>

      <simplelist type="inline">
        <member><xref endterm="olsrd_conf_5-title" linkend="olsrd_conf_5" />
        <xref endterm="olsrd_metrics_3-title"
        linkend="olsrd_metrics_3" /></member>
      </simplelist>
    </refsect1>
  </refentry>

  <refentry id="olsrd_conf_5">
    <indexterm>
      <primary><filename>olsrd.conf</filename></primary>
    </indexterm>

    <refentryinfo>
      <titleabbrev>Configuration File for
      <productname>olsrd</productname></titleabbrev>

      <authorgroup>
        <author>
          <firstname>Sven-Ola</firstname>

          <surname>Tücke</surname>

          <email>sven-olaægmx.de</email>
        </author>

        <author>
          <firstname>Andreas</firstname>

          <surname>Tønnesen</surname>

          <email>andretoæolsr.org</email>
        </author>
      </authorgroup>
    </refentryinfo>

    <refmeta>
      <refentrytitle id="olsrd_conf_5-title">olsrd.conf</refentrytitle>

      <manvolnum>5</manvolnum>
    </refmeta>

    <refnamediv>
      <refname><filename>olsrd.conf</filename></refname>

      <refpurpose>configuration file for <xref endterm="olsrd_8-title"
      linkend="olsrd_8" /></refpurpose>
    </refnamediv>

    <refsect1>
      <title>Description</title>

      <para>The <filename>olsrd.conf</filename> file is located in /etc or
      /usr/local/etc by default. The file contains run-time configuration
      settings for the Optimized Link State Routing daemon <xref
      endterm="olsrd_8-title" linkend="olsrd_8" />. During startup, the
      <productname>olsrd</productname> daemon reads in the file. If no command
      line options are present, the default configuration file is read in.
      Otherwise, the file specified by the <option>-f</option> or
      <option>--config</option> command line option is used. All settings are
      inserted as command line options by prepending a double dash and feeding
      them to the getopt parser. The configuration file consists of comments,
      single options and option blocks explained below.</para>

      <para><emphasis role="strong">Note</emphasis>: With earlier versions of
      <productname>olsrd</productname>, the configuration parser was offered
      as stand alone shared library or DLL. With the exception of the Windows
      GUI program (<command>Switch.exe</command>), this was unused. To
      optimize the file size for embedded devices, the stand-alone
      configuration parser was discarded.</para>
    </refsect1>

    <refsect1>
      <title>Comments</title>

      <para>Comments are everything following a hash character
      (<emphasis>#</emphasis>) on a line. This data is discarded. Commenting
      out an option is an easy way to make <productname>olsrd</productname>
      use the default value for that option.</para>
    </refsect1>

    <refsect1>
      <title>Option Syntax</title>

      <para>An option starts with a keyword. If the option accepts arguments,
      separate the keyword and the arguments with one or more space characters
      (or tabs) on the same line. You can surround arguments with double or
      single quotes, for example if an argument contains a space
      character.</para>
    </refsect1>

    <refsect1>
      <title>Single Options</title>

      <para><emphasis role="strong">Caution</emphasis>: The current
      implementation discards several single options controlling the Link
      Quality Extensions valid with earlier versions. If you want the
      RFC-compatible mode, load the <filename>olsrd_lq_rfc.so.1</filename>
      plugin (see <xref endterm="olsrd_conf_5_plugins-title"
      linkend="olsrd_conf_5_plugins" />). If you want to use another LQ
      measurement than the compiled in
      <filename>olsrd_lq_etx_ff.so.1</filename>, consider one of the other LQ
      plugins (also see <xref endterm="olsrd_conf_5_plugins-title"
      linkend="olsrd_conf_5_plugins" />). Discarded options:
      <option>UseHysteresis</option>, <option>HystScaling</option>,
      <option>HystThrHigh</option>, <option>HystThrLow</option>,
      <option>LinkQualityLevel</option>, <option>LinkQualityWinsize</option>,
      <option>LinkQualityAlgorithm</option> and
      <option>LinkQualityAging</option>.</para>

      <para>Single options consists of a keyword and a value. Note, that a
      comment can follow such a option on the same line. Valid single options
      are:</para>

      <variablelist>
        <varlistentry>
          <term><option>config</option>
          <replaceable>configfile</replaceable></term>

          <listitem>
            <para>Nesting within config files is not supported. Do not
            use.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>log</option>
          <replaceable>logging_configuration_string</replaceable></term>

          <listitem>
            <para>This config line controls the output of the logging system
            of <productname>olsrd</productname>. For details see the
            description of the --log command line parameter.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>delgw</option>, <option>dispin</option>,
          <option>dispout</option>, <option>help</option>,
          <option>hemu</option>, <option>iface</option>, <option>ipc</option>,
          <option>nofork</option>, <option>version</option>:</term>

          <listitem>
            <para>While these are valid options, they do not make much sense
            in a config file. Refer to <xref endterm="olsrd_8-title"
            linkend="olsrd_8" /> for their meaning.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>AllowNoInt</option>
          <replaceable>yes</replaceable>|<replaceable>no</replaceable></term>

          <listitem>
            <para><productname>olsrd</productname> supports dynamic
            configuration of network interfaces. This means that interfaces on
            which <productname>olsrd</productname> runs on can be reconfigured
            and <productname>olsrd</productname> will update itself with no
            need to be restarted. <productname>olsrd</productname> also
            supports removal and addition of interfaces in run-time. This
            option specifies that <productname>olsrd</productname> should keep
            running if no network interfaces are available. Defaults to
            <replaceable>yes</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>ClearScreen</option>
          <replaceable>yes</replaceable>|<replaceable>no</replaceable></term>

          <listitem>
            <para>If set to <replaceable>yes</replaceable> and
            <productname>olsrd</productname> running with a
            <option>DebugLevel</option> other that
            <replaceable>0</replaceable>, the terminal to which output is sent
            (STDOUT) is cleared prior to writing updated tables. This makes it
            easier to follow changes in real-time.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>DebugLevel</option>
          <replaceable>0</replaceable>-<replaceable>9</replaceable></term>

          <listitem>
            <para>Controls the amount of debug output
            <productname>olsrd</productname> prints out. If set to
            <replaceable>0</replaceable>, <productname>olsrd</productname>
            will detach from the current process and run in the background. A
            value of <replaceable>9</replaceable> yields a maximum of debug
            output. Defaults to <replaceable>0</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>FIBMetric</option>
          <replaceable>flat</replaceable>|<replaceable>correct</replaceable>|<replaceable>approx</replaceable></term>

          <listitem>
            <para>This setting controls how the metric value for kernel routes
            is handled. While analyzing new information of the mesh topology,
            <productname>olsrd</productname> may change the internal routing
            path to several distant nodes (in hops). If this setting is set to
            <replaceable>flat</replaceable>, kernel routes always have a
            metric of 2. No route update is necessary if the internal routing
            pathes change. If this setting is set to
            <replaceable>correct</replaceable>, the kernel metric shows the
            number of hops to the destination. This induces frequent routing
            changes in larger meshes. If this setting is set to
            <replaceable>approx</replaceable>, the current hop number is set
            as a route metric but not updated if
            <productname>olsrd</productname> detects a hop number change.
            Defaults to <replaceable>flat</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>IpVersion</option>
          <replaceable>4</replaceable>|<replaceable>6</replaceable></term>

          <listitem>
            <para><productname>olsrd</productname> supports both IP versions:
            <replaceable>4</replaceable> and <replaceable>6</replaceable>.
            This option controls what IP version
            <productname>olsrd</productname> uses. Note, that you need to set
            this option early in the config file, because it determines how
            other IP related parameters are interpreted. Defaults to
            <replaceable>4</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LinkQualityDijkstraLimit</option>
          <replaceable>0</replaceable>|<replaceable>255</replaceable>
          <replaceable>[Pollrate]</replaceable>-<replaceable>120.0</replaceable></term>

          <listitem>
            <para>This setting configures a calculation optimization which may
            be necessary for large meshes with slow nodes (e.g. 100 MHz ARM
            CPU). Normally, an incoming TC message triggers a re-calculation
            of the internal network model. This setting can be used switch to
            a regularly calculation (first value set to
            <replaceable>0</replaceable>) and to use a specific calculation
            interval in seconds (second value larger then
            <replaceable>[Pollrate]</replaceable>). Note, that infrequent
            re-calculation may introduce routing loops because nodes need more
            time to adapt their routing tables. Defaults to
            <replaceable>255</replaceable> <replaceable>0.0</replaceable>
            (inactive).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LinkQualityFishEye</option>
          <replaceable>0</replaceable>|<replaceable>1</replaceable></term>

          <listitem>
            <para>Enables (<replaceable>1</replaceable>) or disables
            (<replaceable>0</replaceable>) the experimental fish eye
            algorithm. In mesh network with high packet loss, the topology
            information does not spread fast and synchronized, which
            introduces routing loops. The fish eye algorithm will send TC
            (Topology Control) messages with varying TTL values. Which floods
            the near neighborhood more often with topology information than
            distant nodes (in hops). Use this option together with a shorter
            <option>TcInterval</option> and a higher
            <option>MprCoverage</option> setting.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>MprCoverage</option> <replaceable>1</replaceable> or
          higher</term>

          <listitem>
            <para>This value decides, how many MPRs a node should attempt to
            select for every two hop neighbor. Defaults to
            <emphasis><replaceable>1</replaceable></emphasis>, and any other
            setting will severely reduce the optimization introduced by the
            MPR scheme. Note, that when using the
            <option>LinkQualityFishEye</option> option, a higher value is
            recommended.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>NatThreshold</option>
          <replaceable>0.1</replaceable>-<replaceable>1.0</replaceable></term>

          <listitem>
            <para>In a large mesh network, several gateways may announce HNA
            0/0 which basically says <quote>Internet here</quote>. Because
            most Internet gateways offer their service using a translated
            globally valid IP (NAT), switching the current gateway terminates
            all running NATted connections. In other words: if you live
            between 2 Internet gateways and start download, the download may
            block some OLSR packets. The download will stop because this
            triggers a route change - especially if you do not use traffic
            shaping to prioritize OLSR packets. This setting introduces a
            threshold to stop switching the default gateway on minor LQ/ETX
            changes if another (NATted) gateway is to be used. As a trade off,
            this may introduce routing loops or selects a bad gateway if the
            threshold is too low. Defaults to <replaceable>1.0</replaceable>
            (inactive).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>NicChgsPollInt</option>
          <replaceable>0.1</replaceable>-<replaceable>100.0</replaceable></term>

          <listitem>
            <para>This option sets the interval, in seconds, that
            <productname>olsrd</productname> will check the configured
            interfaces for changes in configuration. Defaults to
            <replaceable>2.5</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>Pollrate</option>
          <replaceable>0.1</replaceable>-<replaceable>10.0</replaceable></term>

          <listitem>
            <para>This option sets the sleep interval, in seconds. While
            polling the interfaces, the <productname>olsrd</productname>
            scheduler will sleep for this time if no packets are to be
            received. If the value is set too high for the current UDP receive
            buffer size, packet loss will occur. Note, that the current
            <productname>olsrd</productname> implementation internally
            calculates timing values in milliseconds (1/1000s). Defaults to
            <replaceable>0.1</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>OlsrPort</option>
          &gt;<replaceable>1000</replaceable></term>

          <listitem>
            <para>If set olsr uses specified port instead of its default IANA assigned port 698!</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>RtProto</option>
          <replaceable>0</replaceable>|<replaceable>1</replaceable>-<replaceable>255</replaceable></term>

          <listitem>
            <para>This setting configures the routing protocol ID to be used
            when setting routes via rtnetlink, see RTNETLINK(7) for the
            <emphasis>rtm_protocol</emphasis> keyword. Use
            <replaceable>0</replaceable> to specify the operating system
            default, e.g. RTPROT_BOOT on Linux). Defaults to
            <replaceable>0</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>RtTableDefault</option>
          <replaceable>0</replaceable>|<replaceable>1</replaceable>-<replaceable>254</replaceable></term>

          <listitem>
            <para>Defines the routing table for inserting a new default route.
            Defaults to <replaceable>0</replaceable> (use
            <option>RtTable</option>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>RtTable</option>
          <replaceable>1</replaceable>-<replaceable>254</replaceable></term>

          <listitem>
            <para>With Linux and BSD, more than one routing table exist in the
            system. Together with a rules set that determines which table
            handles what packets, these system functions are called
            <quote>iproute2</quote> or <quote>Policy Routing</quote>. You may
            want to read the <ulink url="http://lartc.org/">Linux Advanced
            Routing &amp; Traffic Control</ulink> for details. Defaults to
            <replaceable>254</replaceable> (or <quote>main</quote>, see
            <filename>/etc/iproute2/rt_tables</filename>)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>TcRedundancy</option>
          <replaceable>0</replaceable>|<replaceable>1</replaceable>|<replaceable>2</replaceable></term>

          <listitem>
            <para>This value controls the TC redundancy used by the local node
            in TC message generation. To enable a more robust understanding of
            the topology, nodes can be set to announce more than just their
            MPR selector set in TC messages. If set to
            <replaceable>0</replaceable>, the advertised link set of the node
            is limited to the MPR selectors. If set to
            <replaceable>1</replaceable>, the advertised link set of the node
            is the union of its MPR set and its MPR selector set. If set to
            <replaceable>2</replaceable>, the advertised link set of the node
            is the full symmetric neighbor set of the node. Defaults to
            <replaceable>0</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>TosValue</option>
          <replaceable>0</replaceable>-<replaceable>16</replaceable></term>

          <listitem>
            <para>This value controls the type of service value to set in the
            IP header of OLSR control traffic. Defaults to
            <replaceable>16</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>Willingness</option>
          <replaceable>0</replaceable>-<replaceable>7</replaceable></term>

          <listitem>
            <para>Nodes participating in an OLSR routed network will announce
            their willingness to act as relays for OLSR control traffic for
            their neighbors (MPR). This option specifies a fixed willingness
            value to be announced by the local node.
            <replaceable>4</replaceable> is a neutral option here, while
            <replaceable>0</replaceable> specifies that this node will never
            act as a relay, and <replaceable>7</replaceable> specifies that
            this node will always act as such a relay. If this option is unset
            in the configuration file, then <productname>olsrd</productname>
            will try to retrieve information about the system power and
            dynamically update willingness according to this info. If no such
            info can be retrieved willingness is set to
            <replaceable>4</replaceable>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>RouterId</option>
          <replaceable>ipaddress</replaceable></term>

          <listitem>
            <para>This value controls sets the main IP address (called
            originator address in OLSR) to a fixed value. This prevents route
            loss when the first interface of a router vanishes.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>

    <refsect1 id="olsrd_conf_5_optionblocks">
      <title id="olsrd_conf_5_optionblocks-title">Option Blocks</title>

      <para>Option blocks are configuration options that holds a body of
      sub-options encapsulated in curled braces <quote>{...}</quote>. Note,
      that you need to separate the keyword and the starting brace with one or
      more whitespace characters (spaces, tabs, or newlines). Also separate
      sub-options as well as the closing brace with additional whitespace
      characters. Valid options are:</para>

      <variablelist>
        <varlistentry>
          <term><option>IpcConnect { <replaceable>sub-options</replaceable>
          }</option></term>

          <listitem>
            <para><productname>olsrd</productname> can allow processes to make
            a TCP connection to itself on which data regarding the topology
            will be transmitted. This is typically used by GUI applications to
            provide a user-friendly front-end to
            <productname>olsrd</productname>. This option block controls the
            IPC access. Sub options are:</para>

            <variablelist>
              <varlistentry>
                <term><option>MaxConnections</option>
                <replaceable>0</replaceable>-<replaceable>5</replaceable></term>

                <listitem>
                  <para>This option specifies how many connections that can
                  exist simultaneously. Multiple connections have not been
                  tested, and probably do not work! This option should only be
                  used to control whether or not processes can connect to
                  <productname>olsrd</productname> by setting it either to
                  <replaceable>0</replaceable>, which will tell
                  <productname>olsrd</productname> not to allow any
                  connections, or by setting it to a positive value. Defaults
                  to <replaceable>0</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Host</option>
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>This option specifies a single host that is allowed to
                  connect to <productname>olsrd</productname>. By default only
                  the loopback address (127.0.0.1) is allowed to access. If
                  you want to be able to connect from another host, you should
                  add that IP address. You may add multiple hosts.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Net</option> <replaceable>ipaddr</replaceable>
                <replaceable>netmask</replaceable>|<replaceable>prefix</replaceable></term>

                <listitem>
                  <para>You can specify a net range of IP addresses which
                  <productname>olsrd</productname> will allow TCP connections
                  from. Besides the IP address, you need to specify a netmask
                  for IPv4 and a prefix for IPv6. You may add multiple
                  networks.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>Hna4 { <replaceable>sub-options</replaceable>
          }</option></term>

          <listitem>
            <para>Hosts in a routed network can announce connectivity to
            external networks or hosts using HNA messages. This option block
            is used to set the IPv4 networks or hosts to be announced. Sub
            options are:</para>

            <variablelist>
              <varlistentry>
                <term><replaceable>IPv4-address</replaceable>
                <replaceable>IPv4-netmask</replaceable></term>

                <listitem>
                  <para>Specifies an IPv4 network or host to be announced via
                  HNA messages. Multiple entries can be added. To announce
                  Internet connectivity, add
                  <replaceable>0.0.0.0</replaceable>
                  <replaceable>0.0.0.0</replaceable>. To announce a single
                  host, add <replaceable>ipaddr</replaceable>
                  <replaceable>255.255.255.255</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>Hna6 { <replaceable>sub-options</replaceable>
          }</option></term>

          <listitem>
            <para>Hosts in a routed network can announce connectivity to
            external networks or hosts using HNA messages. This option block
            is used to set the IPv6 networks or hosts to be announced. Sub
            options are:</para>

            <variablelist>
              <varlistentry>
                <term><replaceable>IPv6-address</replaceable> 0-128</term>

                <listitem>
                  <para>Specifies an IPv6 network or host to be announced via
                  HNA messages. Multiple entries can be added. To announce
                  Internet connectivity, add <replaceable>::</replaceable>
                  <replaceable>0</replaceable> . To announce a single host,
                  add <replaceable>ipaddr</replaceable>
                  <replaceable>128</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin <replaceable>plugin-filename</replaceable>
          { <replaceable>sub-options</replaceable> }</option></term>

          <listitem>
            <para>Specifies a plugin that <productname>olsrd</productname>
            should load at startup. You need to specify the filename for the
            shared object file (<filename>*.so</filename> on Linux and
            <filename>*.dll</filename> on Windows). Read the
            <filename>README</filename> in the plugin's source directory or
            refer the <xref endterm="olsrd_conf_5_plugins-title"
            linkend="olsrd_conf_5_plugins" /> section below. This option block
            can be repeated to add multiple plugins. Sub options are:</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> <replaceable>key</replaceable>
                <replaceable>value</replaceable></term>

                <listitem>
                  <para>Sends a pair of parameters to the plugin at
                  initialization. The parameter's
                  <replaceable>key</replaceable> is case insensitive. Refer to
                  the <xref endterm="olsrd_conf_5_plugins-title"
                  linkend="olsrd_conf_5_plugins" /> section below or consult
                  individual plugin documentation for possible
                  parameters.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>Interface <replaceable>interface1</replaceable>
          <replaceable>interface2...</replaceable> {
          <replaceable>sub-options</replaceable> }</option></term>

          <listitem>
            <para>This option block specifies one or more network interfaces
            on which <productname>olsrd</productname> should run. At least one
            network interface block must be specified for
            <productname>olsrd</productname> to run. Various parameters can be
            specified on individual interfaces or groups of interfaces. This
            option block can be repeated to add multiple interface
            configurations. Sub options are:</para>

            <variablelist>
              <varlistentry>
                <term><option>Mode</option>
                <replaceable>mesh</replaceable>|<replaceable>ether</replaceable></term>

                <listitem>
                  <para><productname>olsrd</productname> can be used on wireless interfaces
                  and ethernet. To prevent unnecessary packet forwardings on switched
                  ethernet interfaces the mode of an interface can be set to <option>ether</option>. 
                  The default value of this option is <option>mesh</option>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>AutoDetectChanges</option>
                <replaceable>yes</replaceable>|<replaceable>no</replaceable></term>

                <listitem>
                  <para><productname>olsrd</productname> can auto detect
                  changes in interface configurations by polling on the
                  interval set by <option>NicChgsPollInt</option>. This is
                  enabled by default but can be turned off per interface to
                  save CPU cycles.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Ip4Broadcast</option>
                <replaceable>IPv4-address</replaceable></term>

                <listitem>
                  <para>Forces the given IPv4 broadcast address to be used as
                  destination address for all outgoing OLSR traffic on the
                  interface. If your mesh uses several IP address ranges, the
                  global broadcast address
                  <replaceable>255.255.255.255</replaceable> can be used. If
                  you use a point-to-point link (e.g. a tun-type VPN tunnel),
                  you may configure the neighbours IP address. If this option
                  is unset, the broadcast address of the interface will be
                  used. In this case, the broadcast address will be updated
                  during run-time if a change is detected.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Ip6AddrType</option>
                <replaceable>site-local</replaceable>|<replaceable>unique-local</replaceable>|<replaceable>global</replaceable></term>

                <listitem>
                  <para>This option sets the IPv6 address type to be used for
                  interface address detection. Defaults to
                  <replaceable>site-local</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Ip6MulticastSite</option>
                <replaceable>IPv6-address</replaceable></term>

                <listitem>
                  <para>If <option>Ip6AddrType</option> is set to
                  <replaceable>site-local</replaceable>, this setting forces
                  the given IPv6 broadcast address to be used as destination
                  address for all outgoing OLSR traffic on the interface.
                  .</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Ip6MulticastGlobal</option>
                <replaceable>IPv6-address</replaceable></term>

                <listitem>
                  <para>If <option>Ip6AddrType</option> is set to
                  <replaceable>global</replaceable>, this setting forces the
                  given IPv6 broadcast address to be used as destination
                  address for all outgoing OLSR traffic on the interface.
                  .</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>HelloInterval</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the interval on which HELLO (RFC-mode) or
                  LQ_HELLO (LQ/ETX-mode) messages will be generated and
                  transmitted on the interface. Note, that HELLO messages are
                  used to detect neighbours and determine symmetric
                  (bi-directional) links. These messages also include the
                  current neighbour information and always have a TTL of 1
                  which prevents any forwarding.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>HelloValidityTime</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the validity time to be announced in HELLO or
                  LQ_HELLO messages transmitted on the interface. This value
                  must be larger than <option>HelloInterval</option>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>TcInterval</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the interval on which TC (RFC-mode) or LQ_TC
                  (LQ/ETX-mode) messages will be generated and transmitted on
                  the interface. Note, that TC (Topology Control) messages are
                  used to spread topology information. These messages also
                  include the current neighbour information and normally have
                  a TTL larger than 1 to flood them through the mesh network.
                  TC or LQ_TC messages may be forwarded delayed to support
                  packet aggregation. If the
                  <option>LinkQualityFishEye</option> option is enabled, the
                  TTL for these messages is varied to faster distribute
                  topology information in the near neighbourhood.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>TcValidityTime</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the validity time to be announced in TC or LQ_TC
                  messages transmitted on the interface. This value must be
                  larger than <option>TcInterval</option>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>MidInterval</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the interval on which MID messages will be
                  generated and transmitted on the interface. Note, that MID
                  messages spread alias information and will be emitted only
                  by nodes with more than one <productname>olsrd</productname>
                  interface.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>MidValidityTime</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the validity time to be announced in MID messages
                  transmitted on the interface. This value must be larger than
                  <option>MidInterval</option>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>HnaInterval</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the interval on which HNA messages will be
                  generated and transmitted on the interface. Note, that HNA
                  messages spread gateway information and will be emitted only
                  by nodes with configured <option>Hna4</option> or
                  <option>Hna6</option> options.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>HnaValidityTime</option>
                <replaceable>0.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Sets the validity time to be announced in HNA messages
                  transmitted on the interface. This value must be larger than
                  <option>HnaInterval</option>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>Weight</option>
                <replaceable>0</replaceable>-<replaceable>[maxint]</replaceable></term>

                <listitem>
                  <para>When multiple links exist between hosts, the
                  <emphasis>weight</emphasis> of the interface is used to
                  determine the link to route by. Normally the
                  <emphasis>weight</emphasis> is automatically calculated by
                  <productname>olsrd</productname> based on the
                  characteristics of the interface, but here you can specify a
                  fixed value. <productname>olsrd</productname> will choose
                  links with the lowest <emphasis>weight</emphasis>
                  value.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>LinkQualityMult</option>
                <replaceable>default</replaceable>|<replaceable>neighbour-ipaddr</replaceable>
                <replaceable>0.1</replaceable>-<replaceable>1.0</replaceable></term>

                <listitem>
                  <para>When using <productname>olsrd</productname> in
                  LQ/ETX-mode, the neighbour link cost is calculated based on
                  packet loss or hello message loss (see
                  <option>LinkQualityAlgorithm</option> option). Because the
                  applied measurement may not reflect the real-live connection
                  quality and link speed, this setting allows you to manually
                  fine-tune the measurement results. You can add one or more
                  <option>LinkQualityMult</option> options and correlate the
                  IP address of a neighbour with a multiplication factor. This
                  setting only allows you to determine bad links, e.g. a
                  factor of <replaceable>0.5</replaceable> basically says:
                  <quote>this link is only half as good as the packet loss may
                  indicate</quote>. For this reason, the
                  <replaceable>default</replaceable> keyword can be used to
                  lower all ETX/LQ values with a lower factor. You then define
                  better links by adding further entries with known IP
                  addresses and a higher factor.</para>

                  <para><emphasis role="strong">Note</emphasis>: While
                  switching routes generally is not harmful, people tend to
                  fiddle with the <option>LinkQualityMult</option> setting
                  only because their automatically selected Internet gateway
                  flaps. This is a bad habit, because it disturbs the ETX/LQ
                  measurement and leads to sub-optimal routes for others. Try
                  using the <option>NatThreshold</option> option instead.
                  Another option is manual gateway selection either by
                  automatic tunneling or by using a VPN technique.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>

    <refsect1 id="olsrd_conf_5_plugins">
      <title id="olsrd_conf_5_plugins-title">Plugins</title>

      <para>The functionality of the <productname>olsrd</productname> daemon
      is extendable by plugins. Plugins are shared object files
      (<filename>*.so</filename> on Linux or <filename>*.dll</filename> on
      Windows) to be loaded from <productname>olsrd</productname> during
      startup. To load a plugin, add the appropriate
      <option>LoadPlugin</option> option to the config file (see <xref
      endterm="olsrd_conf_5_optionblocks-title"
      linkend="olsrd_conf_5_optionblocks" /> above). A plugin accepts zero or
      more parameters, which can be added by <option>PlParam</option>
      <replaceable>key</replaceable> <replaceable>value</replaceable>
      statements to the <option>LoadPlugin</option> option block. The
      following plugin are included with the current
      <productname>olsrd</productname> installation:</para>

      <variablelist>
        <varlistentry>
          <term><option>LoadPlugin arprefresh.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin refreshes the local ARP cache from received OLSR
            messages. This optimizes the ARP lookups otherwise required if
            unicast traffic is send on a previously unused link chain. The
            correct function requires Linux kernel 2.6. The plugin accepts no
            parameters.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_bmf.so.1.5.3 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin floods IP-multicast and optional IP-broadcast
            traffic via the MPR chain. The multicast or broadcast traffic is
            grabbed from a non-OLSR interface, forwarded through the mesh and
            exits to another non-OLSR interface. Note, that this plugin
            requires multi-threading support. Also note, that this plugin has
            a separate source repository on <ulink
            url="http://olsr-bmf.sourceforge.net/">http://olsr-bmf.sourceforge.net/</ulink>
            . The plugin accepts the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> NonOlsrIf
                <replaceable>interface</replaceable></term>

                <listitem>
                  <para>As a special feature, it is possible to also forward
                  from and to non-OLSR interfaces. If you have network
                  interfaces on which <productname>olsrd</productname> is not
                  running, but you do want to forward multicast and
                  local-broadcast IP packets, specify up to 32
                  <option>NonOlsrIf</option> sub-options.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> DoLocalBroadcast
                <replaceable>yes</replaceable>|<replaceable>true</replaceable>|<replaceable>no</replaceable>|<replaceable>false</replaceable></term>

                <listitem>
                  <para>Enable or disable the flooding of local broadcast
                  packets (e.g. packets with IP destination 192.168.1.255).
                  Defaults to <replaceable>yes</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> BmfInterface
                <replaceable>interface</replaceable></term>

                <listitem>
                  <para>Specifies the name of the BMF network interface.
                  Defaults to <replaceable>bmf0</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> BmfInterfaceIp
                <replaceable>ipaddr/prefix</replaceable></term>

                <listitem>
                  <para>Specifies the IP address and netmask for the BMF
                  network interface. By default, the IP address of the first
                  OLSR interface is copied. The default prefix is
                  <replaceable>32</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> CapturePacketsOnOlsrInterfaces
                <replaceable>yes</replaceable>|<replaceable>true</replaceable>|<replaceable>no</replaceable>|<replaceable>false</replaceable></term>

                <listitem>
                  <para>Enables or disables capturing packets on the
                  OLSR-enabled interfaces (in promiscuous mode). The multicast
                  (and, if configured, local broadcast) packets sent on the
                  non-OLSR network interfaces and on the BMF network interface
                  will always be flooded over the OLSR network. If this
                  parameter is <replaceable>yes</replaceable>, also the
                  packets sent on the OLSR-enabled network interfaces will be
                  flooded over the OLSR network. Note, that his parameter
                  should be set consistently on all hosts throughout the
                  network. If not, hosts may receive multicast packets in
                  duplicate. Defaults to <replaceable>no</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> BmfMechanism
                <replaceable>Broadcast</replaceable>|<replaceable>UnicastPromiscuous</replaceable></term>

                <listitem>
                  <para>Determines the forwarding mechanism to use. In the
                  <replaceable>UnicastPromiscuous</replaceable> mode, packets
                  are forwarded (unicast) to the best candidate neighbor;
                  other neighbors listen promiscuously. IP-local broadcast is
                  not used. This saves air time on 802.11 WLAN networks, on
                  which unicast packets are usually sent at a much higher bit
                  rate than broadcast packets (which are sent at a basic bit
                  rate). Defaults to
                  <replaceable>Broadcast</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> FanOutLimit
                <replaceable>1</replaceable>-<replaceable>10</replaceable></term>

                <listitem>
                  <para>If the number of neighbors to forward to is less than
                  or equal to the <option>FanOutLimit</option>, then packets
                  to be relayed will be sent via unicast. If the number is
                  greater than the <option>FanOutLimit</option>, the packet
                  goes out as broadcast. Not used if
                  <option>BmfMechanism</option> is set to
                  <replaceable>UnicastPromiscuous</replaceable>. Defaults to
                  <replaceable>2</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> BroadcastRetransmitCount
                <replaceable>1</replaceable>-<replaceable>10</replaceable></term>

                <listitem>
                  <para>Determines the number of times BMF will transmit the
                  same packet whenever it decides to use broadcast to forward
                  a packet. Not used if <option>BmfMechanism</option> is set
                  to <replaceable>UnicastPromiscuous</replaceable>. Defaults
                  to <replaceable>1</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_dot_draw.so.0.3 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin can be used to query topology graphs via a
            network connection. To visualize the queried information, you need
            the <productname>GraphViz</productname> package from: <ulink
            url="http://www.graphviz.org/">http://www.graphviz.org/</ulink>.
            The plugin accepts the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> port
                <replaceable>1</replaceable>-<replaceable>65535</replaceable></term>

                <listitem>
                  <para>Determines the port number to be queried. Defaults to
                  <replaceable>2004</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> accept
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>Determines a single IP address from which a connection
                  is accepted. Defaults to
                  <replaceable>127.0.0.1</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_dyn_gw.so.0.4 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin announces <quote>HNA { 0.0.0.0 0.0.0.0 }</quote>
            if it detects a functional static default route. The plugin
            constantly tests the default route using ICMP
            (<command>ping</command>). Note, that this plugin requires
            multi-threading support. Note also, that you need a static default
            route on the node. The plugin accepts the following
            parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> interval
                <replaceable>1</replaceable>-<replaceable>3600</replaceable></term>

                <listitem>
                  <para>Determines the time between ping tests. Defaults to
                  <replaceable>5</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> ping
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>Adds a ping destination address. If one or more IPv4
                  addresses are configured, the plugin performs a ping test on
                  these addresses in descending order. If a ping test is
                  successful, subsequent addresses won't be pinged No
                  default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> hna "<replaceable>ipaddr
                netmask-or-prefix</replaceable>"</term>

                <listitem>
                  <para>Specifies an optional HNA entry to be announced if the
                  ping test succeeds. Note, that the <option>PlParam</option>
                  sequence matters: to link a specific HNA entry to a ping
                  test, add the desired <replaceable>hna</replaceable>
                  parameter followed by one or more
                  <replaceable>ping</replaceable> parameters. Defaults to
                  <replaceable>0.0.0.0 0.0.0.0</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_dyn_gw_plain.so.0.4 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin announces <quote>HNA { 0.0.0.0 0.0.0.0 }</quote>
            if it detects a static default route. To maintain the default
            route, you need an external program such as a cron job. The plugin
            accepts no parameters.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_httpinfo.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin can be used to query internal information via a
            web browser. The plugin implements a tiny HTTP server and
            publishes information on several pages. The plugin accepts the
            following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> port
                <replaceable>1</replaceable>-<replaceable>65535</replaceable></term>

                <listitem>
                  <para>Determines the port number to be queried. No default,
                  <replaceable>8080</replaceable> recommended.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> host
                <replaceable>ipaddr</replaceable></term>

                <term><option>PlParam</option> host4
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>Adds a single IPv4 address to the list of allowed
                  source addresses. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> net "<replaceable>ipaddr
                netmask</replaceable>"</term>

                <term><option>PlParam</option> net4 "<replaceable>ipaddr
                netmask</replaceable>"</term>

                <listitem>
                  <para>Adds an IPv4 network range to the list of allowed
                  source addresses. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> host6
                <replaceable>IPv6-address</replaceable></term>

                <listitem>
                  <para>Adds a single IPv6 address to the list of allowed
                  source addresses. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> net6 "<replaceable>IPv6-address
                0-128</replaceable>"</term>

                <listitem>
                  <para>Adds an IPv6 network range to the list of allowed
                  source addresses. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> resolve
                <replaceable>yes</replaceable>|<replaceable>true</replaceable>|<replaceable>no</replaceable>|<replaceable>false</replaceable></term>

                <listitem>
                  <para>Determines if the plugin tries to resolve IP addresses
                  to names when generating output. Note, that if you are using
                  private IP addresses in your mesh, you also need to load
                  <option>olsrd_nameservice.so.0.3</option> and link the local
                  <filename>/etc/hosts</filename> file to the
                  <option>hosts-file</option> generated by this plugin.
                  Otherwise this option slows down the plugins operation.
                  Defaults to <replaceable>no</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_lq_etx_ff.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin realized the LQ/ETX detection algorithm based on
            OLSR packet loss. This algorithm is compatible to the LQ
            calculation used by previous versions of
            <productname>olsrd</productname>, so this algorithm is also the
            compiled-in default. Note, that <productname>olsrd</productname>
            needs to send large signaling packet for this to work optimal,
            which is only true if you have a larger mesh (&gt;50 nodes). The
            plugin accepts no parameters.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_lq_etx_float.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin calculates the link quality based on HELLO and
            LQ_HELLO message loss. While calculating, it uses floating point
            math. Note, that HELLO messages trigger a send-buffer-flush, so
            basically HELLOs are sent in small packets. Because the packet
            loss for small packets is much lower than for large packets, these
            algorithms may not discover optimal routes. The plugin accepts the
            following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> LinkQualityAging
                <replaceable>0.01</replaceable>-<replaceable>1.0</replaceable></term>

                <listitem>
                  <para>This setting controls the LQ/ETX change speed for the
                  plugin. A higher value will result in faster LQ/ETX changes.
                  Defaults to <replaceable>0.1</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_lq_etx_fpm.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin calculates the link quality based on HELLO and
            LQ_HELLO message loss. While calculating, it uses integer-based
            fixed point math (FPM). Note, that HELLO messages trigger a
            send-buffer-flush, so basically HELLOs are sent in small packets.
            Because the packet loss for small packets is much lower than for
            large packets, these algorithms may not discover optimal routes.
            The plugin accepts the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> LinkQualityAging
                <replaceable>0.01</replaceable>-<replaceable>1.0</replaceable></term>

                <listitem>
                  <para>This setting controls the LQ/ETX change speed for the
                  plugin. A higher value will result in faster LQ/ETX changes.
                  Defaults to <replaceable>0.1</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_lq_etx_rfc.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin realizes the hop-optimized metric required by
            RFC 3626. You can load this plugin if you require standard-conform
            operation.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> UseHysteresis
                <replaceable>yes</replaceable>|<replaceable>no</replaceable></term>

                <listitem>
                  <para>If set to <replaceable>yes,</replaceable> hysteresis
                  will be used as explained in section 14 of RFC 3626. The
                  setting determines if hysteresis is used. Defaults to
                  <replaceable>no</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> HystScaling
                <replaceable>0.01</replaceable>-<replaceable>0.99</replaceable></term>

                <listitem>
                  <para>Sets the scaling value used by the hysteresis
                  algorithm. This must be a positive floating point value
                  smaller than <replaceable>1.0</replaceable>. Consult RFC
                  3626 for details. Defaults to
                  <replaceable>0.5</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> HystThrHigh
                <replaceable>0.0</replaceable>-<replaceable>1.0</replaceable></term>

                <listitem>
                  <para>This option sets the upper threshold for accepting a
                  link in hysteresis calculation. The value must be higher
                  than the one set as the lower threshold. Defaults to
                  <replaceable>0.8</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> HystThrLow
                <replaceable>0.0</replaceable>-<replaceable>1.0</replaceable></term>

                <listitem>
                  <para>This option sets the lower threshold for setting a
                  link to asymmetric using hysteresis. The value must be lower
                  than the one set as the upper threshold. Defaults to
                  <replaceable>0.3</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_mini.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin is an example to be copied if you want to
            program a new plugin. The plugin accepts the following
            parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> test
                "<replaceable>some-text</replaceable>"</term>

                <listitem>
                  <para>Prints out some text during plugin initialization. No
                  default.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_nameservice.so.0.3 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin floods node information through the mesh
            piggy-backed on the OLSR protocol. It also collects information
            received by other nodes and stores that information in different
            text files on a regularly basis. The plugin accepts the following
            parameters.</para>

            <variablelist>
              <title>General</title>

              <varlistentry>
                <term><option>PlParam</option> interval
                <replaceable>1</replaceable>-<replaceable>3968</replaceable></term>

                <listitem>
                  <para>Determines the interval for sending NAME messages in
                  seconds. Defaults to <replaceable>120</replaceable> (2
                  minutes).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> timeout
                <replaceable>1.0</replaceable>-<replaceable>3968.0</replaceable></term>

                <listitem>
                  <para>Determines the validity time for received NAME
                  messages in seconds. Defaults to
                  <replaceable>1800.0</replaceable> (30 minutes)</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <title>Host Names</title>

              <varlistentry>
                <term><option>PlParam</option> name
                <replaceable>hostname</replaceable></term>

                <listitem>
                  <para>Configures a host name for the
                  <productname>olsrd</productname> node. This name together
                  with the main IP address of <productname>olsrd</productname>
                  is flooded though the mesh. You can specify this parameter
                  more than once to flood different names. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> suffix
                <replaceable>dotname</replaceable></term>

                <listitem>
                  <para>Configures a suffix which is appended to all received
                  names. No default, but <replaceable>.olsr</replaceable>
                  (with a dot) is recommended to prevent DNS name
                  spoofing.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> hosts-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>The plugin writes received IP addresses and names to a
                  resolver compatible file which is updated on a regularly
                  basis. To overwrite the local hosts file, specify
                  <filename>/etc/hosts</filename> (Linux, BSD) or
                  <filename>c:\\windows\\system32\\drivers\\etc\\hosts</filename>
                  (Windows). Defaults to
                  <filename>/var/run/hosts_olsr</filename> (Linux, BSD) or
                  <filename>c:\windows\hosts_olsr</filename> (Windows).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> add-hosts
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configures a file which contents are appended when
                  writing the <option>hosts-file</option>. If
                  <productname>olsrd</productname> is configured to overwrite
                  your /etc/hosts file, you may rename your current /etc/hosts
                  file and configure this parameter to preserve any static
                  entries. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> name-change-script
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configures a shell script which is executed after
                  updating the <option>hosts-file</option>. Can be used to
                  update a website or database. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> sighup-pid-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Sends a SIGHUP to the process specified by the pidfile
                  (usually <filename>/var/run/dnsmasq.pid</filename>) when the
                  host name table changes. This is useful for letting
                  <productname>dnsmasq</productname> or
                  <productname>bind</productname> know they have to reload
                  their hosts file. Linux or BSD only, no default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option>
                <replaceable>[ipaddr]</replaceable>
                <replaceable>hostname</replaceable></term>

                <listitem>
                  <para>Adds a host name to be announced for the specified IP
                  address. Note, that this parameter is not commonly used,
                  specify the <option>name</option> parameter instead (see
                  above). The IP address has to be either from one of the
                  <productname>olsrd</productname> interfaces or within a
                  configured HNA network. This parameter can be specified
                  multiple times. No default.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <title>Services</title>

              <varlistentry>
                <term><option>PlParam</option> service
                "<replaceable>announcement</replaceable>"</term>

                <listitem>
                  <para>Floods the configured service announcement through the
                  mesh. The announcement must include 3 fields separated with
                  a pipe character:
                  <replaceable>URL</replaceable>|<replaceable>Protocol</replaceable>|<replaceable>Description</replaceable>.
                  The <replaceable>URL</replaceable> field needs to start with
                  a protocol id, determines an IP or host.suffix combination
                  and adds a port number. Examples:
                  <quote>http://10.0.0.1:80</quote> or
                  <quote>ftp://myname.olsr:20</quote>.
                  <productname>olsrd</productname> also checks, if the address
                  is a local IP address, is included with any configured HNA
                  range, or is equal to a configured <option>name</option> and
                  <option>suffix</option> parameter. The
                  <replaceable>Protocol</replaceable> field indicates either
                  <replaceable>tcp</replaceable> or
                  <replaceable>udp</replaceable>. Use any non-empty text for
                  the <replaceable>Description</replaceable> field. You can
                  specify this parameter more than once to flood different
                  services. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> services-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>The plugin writes received service announcements to a
                  file which is updated on a regularly basis. Defaults to
                  <filename>/var/run/services_olsr</filename> (Linux, BSD) or
                  <filename>c:\windows\services_olsr</filename>
                  (Windows).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> services-change-script
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configures a shell script which is executed after
                  updating the <option>services-file</option>. No
                  default.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <title>MAC Addresses</title>

              <varlistentry>
                <term><option>PlParam</option> mac
                <replaceable>xx:xx:xx:xx:xx:xx[,0-255]</replaceable></term>

                <listitem>
                  <para>Floods the configured MAC address through the mesh.
                  This MAC address may be used to fine control captive portal
                  solutions based on MAC adresses. The optional decimal number
                  designates a class. You can specify this parameter more than
                  once to flood different MAC addresses. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> macs-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>The plugin writes received MAC adresses to a file
                  which is updated on a regularly basis. Defaults to
                  <filename>/var/run/macs_olsr</filename> (Linux, BSD) or
                  <filename>c:\windows\macs_olsr</filename> (Windows).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> macs-change-script
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configures a shell script which is executed after
                  updating the <option>macs-file</option>. No default.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <title>DNS Forwarders</title>

              <varlistentry>
                <term><option>PlParam</option> dns-server
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>Announces the configured IP address which should
                  indicate a DNS server or DNS forwarder. If you configure
                  <replaceable>0.0.0.0</replaceable>, the main IP address of
                  <productname>olsrd</productname> will be replaced. Other
                  running <productname>olsrd</productname> instances will
                  receive a list of announced DNS server IP addresses, select
                  the currently best reachable IP address, and write the
                  selected IP address to the <option>resolv-file</option>
                  file.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> resolv-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Defaults to
                  <filename>/var/run/resolvconf_olsr</filename> (Linux, BSD)
                  or <filename>c:\windows\resolvconf_olsr</filename>
                  (Windows).</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <title>GPS Positions</title>

              <varlistentry>
                <term><option>PlParam</option> lat
                <replaceable>latitude</replaceable></term>

                <listitem>
                  <para>Configures a decimal float value (latitude) for this
                  node to be flooded in the mesh. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> lon
                <replaceable>longitude</replaceable></term>

                <listitem>
                  <para>Configures a decimal float value (longitude) for this
                  node to be flooded in the mesh. No default.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> latlon-file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>The plugin writes received positions to a file which
                  is updated on a regularly basis. The file format provides
                  javascript-compatible function calls ready for inclusion to
                  a web page. The file is written only, if the
                  <option>lat</option> and <option>lon</option> parameters are
                  set. Defaults to <filename>/var/run/latlon.js</filename>
                  (Linux, BSD) or <filename>c:\windows\latlon.js</filename>
                  (Windows).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> latlon-infile
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configures a file to read positions from. This
                  parameter is meant to be used by a moving GPS receiver,
                  which may write comma separated decimal latitude and
                  longitude to this file. This will overwrite the
                  <option>lat</option> and <option>lon</option> parameters
                  during runtime. No default.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_quagga.so.0.2.2 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin allows you to import or export
            <productname>olsrd</productname> routing information from or to
            the <productname>quagga</productname> routing daemon (see <ulink
            url="http://www.quagga.net/">http://www.quagga.net/</ulink>). You
            need a patched and running <productname>quagga</productname>
            routing daemon to load this plugin successfully. The plugin
            accepts the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> redistribute
                <replaceable>system</replaceable>|<replaceable>kernel</replaceable>|<replaceable>connect</replaceable>|<replaceable>static</replaceable>|<replaceable>rip</replaceable>|<replaceable>ripng</replaceable>|<replaceable>ospf</replaceable>|<replaceable>ospf6</replaceable>|<replaceable>isis</replaceable>|<replaceable>bgp</replaceable>|<replaceable>hsls</replaceable></term>

                <listitem>
                  <para>Notifies <productname>Zebra</productname> to add a
                  specific protocol for redistribution. You may add this
                  parameter more than once.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> ExportRoutes
                <replaceable>only/both</replaceable></term>

                <listitem>
                  <para>Determines, if <productname>olsrd</productname> should
                  <replaceable>only</replaceable> export routes to
                  <productname>quagga</productname> or should export routes to
                  <replaceable>both</replaceable>
                  <productname>quagga</productname> and kernel. If this
                  parameter is unset, no routes are exported to
                  <productname>quagga</productname>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> Distance
                <replaceable>0</replaceable>-<replaceable>255</replaceable></term>

                <listitem>
                  <para>Configures the administrative distance for routes
                  exported to <productname>Zebra</productname>. Defaults to
                  <replaceable>0</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> LocalPref
                <replaceable>yes</replaceable>|<replaceable>true</replaceable>|<replaceable>no</replaceable>|<replaceable>false</replaceable></term>

                <listitem>
                  <para>Sets the SELECTED flag on the routes exported to
                  <productname>Zebra</productname> which means these routes
                  are preferred in any case. Defaults to
                  <replaceable>no</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_secure.so.0.5 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin uses a secret pre shared key for signature
            generation and verification of incoming OLSR messages. All nodes
            that participate in an OLSR routing domain need to use the same
            key. The key as a size of 128-bits and is read in from a key file
            which should contain 16 bytes of binary data. The plugin accepts
            the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> keyfile
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Configure a filename to read the pre shared key from.
                  Defaults to
                  <filename>/etc/olsrd.d/olsrd_secure_key</filename>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_txtinfo.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin can be used to query internal information via
            the <guilabel>wget</guilabel> command. This plugin is a de-bloated
            and scriptable version of the httpinfo-Plugin. Example usage:
            <command>wget -q -O - http://localhost:2006/neighbours</command>
            to display the current neighbour table. The plugin accepts the
            following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> port
                <replaceable>1</replaceable>-<replaceable>65535</replaceable></term>

                <listitem>
                  <para>Determines the port number to be queried. Defaults to
                  <replaceable>2006</replaceable>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> accept
                <replaceable>ipaddr</replaceable></term>

                <listitem>
                  <para>Adds a single IP address to the list of allowed source
                  addresses. Defaults to <replaceable>127.0.0.1</replaceable>
                  for IPv4 or <replaceable>::1</replaceable> for IPv6.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>LoadPlugin olsrd_watchdog.so.0.1 {
          <replaceable>...</replaceable> }</option></term>

          <listitem>
            <para>This plugin writes the current time to a file on a regularly
            basis. This can be used to detect a freezed instance of
            <productname>olsrd</productname> by an external script or cron
            job. The plugin accepts the following parameters.</para>

            <variablelist>
              <varlistentry>
                <term><option>PlParam</option> file
                <replaceable>filename</replaceable></term>

                <listitem>
                  <para>Determines the file to be written. Defaults to
                  <filename>/tmp/olsr.watchdog</filename>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><option>PlParam</option> interval
                <replaceable>1</replaceable>-<replaceable>3600</replaceable></term>

                <listitem>
                  <para>Determines the update interval in seconds. Defaults to
                  <replaceable>5</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>

    <refsect1>
      <title>Misc</title>

      <para>The homepage of <productname>olsrd</productname> is <ulink
      url="http://www.olsr.org">http://www.olsr.org</ulink></para>
    </refsect1>

    <refsect1>
      <title>Files</title>

      <para><filename>/etc/olsrd.conf</filename></para>
    </refsect1>

    <refsect1>
      <title>See Also</title>

      <simplelist type="inline">
        <member><xref endterm="olsrd_8-title" linkend="olsrd_8" /><xref
        endterm="olsrd_metrics_3-title" linkend="olsrd_metrics_3" /></member>
      </simplelist>
    </refsect1>
  </refentry>

  <refentry id="olsrd_metrics_3">
    <indexterm>
      <primary><productname>olsrd-metrics</productname></primary>
    </indexterm>

    <refentryinfo>
      <titleabbrev><productname>olsrd</productname> Metrics
      Plugin</titleabbrev>

      <authorgroup>
        <author>
          <firstname>Leon Aaron</firstname>

          <surname>Kaplan</surname>

          <email>aaronælo-res.org</email>
        </author>

        <author>
          <firstname>Henning</firstname>

          <surname>Rogge</surname>

          <email>roggeæfgan.de</email>
        </author>
      </authorgroup>
    </refentryinfo>

    <refmeta>
      <refentrytitle id="olsrd_metrics_3-title">olsrd-metrics</refentrytitle>

      <manvolnum>3</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>olsrd-metrics</refname>

      <refpurpose>How to write your own metrics plugin</refpurpose>
    </refnamediv>

    <refsect1>
      <title>Description</title>

      <para>The idea behind the <filename
      class="directory">lib/lq_*</filename> is that you can write your own
      Link Quality (LQ) metric mostly independent of the main
      <productname>olsrd</productname> code.</para>

      <para>What is a metric? A metric is a notion of "distance" between nodes
      in the mesh. Mobile ad hoc network (MANET) research identified the area
      of finding proper metrics for a MANET as one of the most important
      routing decisions. A metric basically determines the path that packets
      will take. The Shortest Path First (SPF, also sometimes called Dijkstra
      Algorithm) will chose the shortest sum of all possible paths. So what
      paths do we want to chose in WLAN MANET networks?</para>

      <para>In general we want to have a little collisions as possible since
      802.11a/b/g is a broadcast medium by nature. When you compare the very
      old Ethernet systems (coax cable, http://en.wikipedia.org/wiki/10BASE2)
      you can observe that at a certain percentage of cable utilization (as
      low as 40%), you would get many collisions (since the coax cable is a
      broadcast medium just as WLAN!) and the total throughput would collapse
      to nearly zero.</para>

      <para>Another choice for metrics might be signal strength.</para>

      <para>Currently <productname>olsrd</productname> (as of Oct-2008)
      implements the following metric:</para>

      <itemizedlist>
        <listitem>
          <para>RFC 3626 conforming hop count (each link has the metric value
          "1")</para>
        </listitem>

        <listitem>
          <para>ETX_default_ff (ETX from MIT roofnet, with FunkFeuer.at
          extensions)</para>
        </listitem>

        <listitem>
          <para>ETX_default_float (ETX with floating point arithmetic)</para>
        </listitem>

        <listitem>
          <para>ETX_default_fpm (ETX with fixed point maths (integer). Much
          faster on small embedded devices!</para>
        </listitem>
      </itemizedlist>
    </refsect1>

    <refsect1>
      <title>Getting Started</title>

      <para>Start by reading <filename>src/lq_plugin.c</filename> and
      <filename>lq_plugin.h</filename>. Note, that struct
      <type>lq_handler</type>: is a pseudo C++ structure ;-) there is a
      pointer table to functions so that the plugin system knows which
      functions it should jump to.</para>

      <programlisting>struct lq_handler {
 ...
  /*
   * number of bytes we need per hello in the hello DB for this specific 
   * metric. This has nothing to do what is being sent over the net. This 
   * is only so that you can use the structure itself to store your 
   * metric data
   */
  size_t hello_lq_size;
  size_t tc_lq_size;
};</programlisting>

      <para>Almost all functions accept a void pointer. This now points to the
      beginning of the custom memory area that you allocated with the
      tc_lq_size or hello_lq_size above.</para>

      <para>Now...: if you want to write your own metric then you must define
      your own struct lq_handler and pass that variable to:</para>

      <programlisting>void register_lq_handler(struct lq_handler *handler, const char *name);</programlisting>

      <para>for example:</para>

      <programlisting>struct lq_handler my_lq_metric;

... // init my_lq_metric fully (every function must be assigned)

register_lq_handler(&amp;my_lq_metric, "my_lq_metric");</programlisting>

      <para>For another example, take a look at
      <filename>lq_plugin_default_float.[ch]</filename> There it is done like
      this:</para>

      <programlisting>/* Default lq plugin settings */
struct lq_handler lq_etxff_handler = {
  &amp;lq_etxff_initialize,
  &amp;lq_etxff_deinitialize,

  &amp;lq_etxff_calc_link_entry_cost,
  &amp;lq_etxff_calc_lq_hello_neighbor_cost,
  &amp;lq_etxff_calc_tc_mpr_addr_cost,
  &amp;lq_etxff_calc_tc_edge_entry_cost,

  &amp;lq_etxff_is_relevant_costchange,

  &amp;lq_etxff_packet_loss_handler,

  &amp;lq_etxff_memorize_foreign_hello,
  &amp;lq_etxff_copy_link_entry_lq_into_tc_mpr_addr,
  &amp;lq_etxff_copy_link_entry_lq_into_tc_edge_entry,
  &amp;lq_etxff_copy_link_lq_into_neighbor,

  &amp;lq_etxff_clear_link_entry,
  NULL, /* not necessary */
  NULL, /* not necessary */
  NULL, /* not necessary */

  &amp;lq_etxff_serialize_hello_lq,
  &amp;lq_etxff_serialize_tc_lq,
  &amp;lq_etxff_deserialize_hello_lq,
  &amp;lq_etxff_deserialize_tc_lq,

  &amp;lq_etxff_print_link_entry_lq,
  &amp;lq_etxff_print_tc_edge_entry_lq,
  &amp;lq_etxff_print_cost,

  sizeof(struct lq_etxff_tc_edge),
  sizeof(struct lq_etxff_tc_mpr_addr),
  sizeof(struct lq_etxff_lq_hello_neighbor),
  sizeof(struct lq_etxff_link_entry),

  LQ_HELLO_MESSAGE,
  LQ_TC_MESSAGE
};</programlisting>
    </refsect1>

    <refsect1>
      <title>Function Reference</title>

      <para>The other entries here are pointers to functions which are defined
      in the .h file. Now lets have a look at the functions.</para>

      <variablelist>
        <varlistentry>
          <term>void (*initialize)(void);</term>

          <listitem>
            <para>This callback is triggered shortly after loading the plugin
            into <productname>olsrd</productname>. Note, that all
            <option>PlParam</option> values from the configuration file are
            already evaluated at this time.</para>

            <para>The <function>initialize</function> function may start some
            timers (via <function>olsr_alloc_cookie</function> ) and may
            register hooks to be triggered when a message is received (via
            <function>olsr_packetparser_add_function</function>).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*deinitialize)(void);</term>

          <listitem>
            <para>This callback is triggered shortly before unloading the
            plugin from <productname>olsrd</productname>. Note, that it is
            generally a good idea to free up hooks, timers and memory acquired
            during initialization or runtime.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>olsr_linkcost (*calc_link_entry_cost) (struct link_entry
          *);</term>

          <listitem>
            <para>This callback is currently unused.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>olsr_linkcost (*calc_lq_hello_neighbor_cost) (struct
          lq_hello_neighbor *);</term>

          <listitem>
            <para>This callback is triggered whenever a HELLO message is
            received and the link cost for the corresponding neighbour needs
            to be calculated.</para>

            <para>You will get a pointer to your part of the hello database
            and your plugin is supposed to generate a hello cost in the
            standard format from the internal representation: the core format
            is a 32 bit unsigned integer . This then is used for adding up the
            costs in the Dijkstra calculation. So be sure that you do not use
            values greater than 2^24 . Otherwise for very long routes (256
            hops) this will then add up in the internal representation so that
            there will be integer overflows. So stay below 2^24(*). The base
            of the cost is your business. For example, to represent fixed
            point arithmetic you might multiply your (float) hello costs by
            256 and treat the least significant byte as the digits behind the
            point.</para>

            <para>(*) or actually even better: us the constant
            LINK_COST_BROKEN from <filename>lq_plugin.h</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>olsr_linkcost (*calc_tc_mpr_addr_cost) (struct tc_mpr_addr
          *);</term>

          <listitem>
            <para>This callback is currently unused.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>olsr_linkcost (*calc_tc_edge_entry_cost) (struct tc_edge_entry
          *);</term>

          <listitem>
            <para>This callback will be called whenever the link cost for a TC
            edge entry needs to be calculated. Same as for
            <function>calc_lq_hello_neighbor_cost</function> but just for TC
            edge entires.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>bool (*is_relevant_costchange) (olsr_linkcost c1,
          olsr_linkcost c2);</term>

          <listitem>
            <para>This callback is triggered after the main loop whenever the
            core has to decide if a new Dijkstra needs to be calculated. This
            happens, for example if the link cost for a TC edge entry was
            updated using <function>calc_tc_edge_entry_cost</function>.</para>

            <para>If a link quality does only change slightly return
            <replaceable>false</replaceable>, so there will be no
            recalculation of the Dijkstra algorithm which costs a lot of CPU.
            Since only the plugin knows the range of the link quality values,
            only the plugin can decide if the cost change is relevant
            enough.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>olsr_linkcost (*packet_loss_handler) (struct link_entry *,
          bool);</term>

          <listitem>
            <para>This callback is triggered every time a HELLO message for a
            certain link_entry * is lost (timeout) or received. This way the
            plugin can update the cost for the link entry.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*memorize_foreign_hello) (struct link_entry *, struct
          lq_hello_neighbor *);</term>

          <listitem>
            <para>This callback is triggered to copy the link quality
            information from a received HELLO message into a link
            entry.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*copy_link_entry_lq_into_tc_mpr_addr) (struct
          tc_mpr_addr *, struct link_entry *);</term>

          <listitem>
            <para>This callback copies the link quality information from a
            link_entry to a tc_mpr_addr.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*copy_link_entry_lq_into_tc_edge_entry) (struct
          tc_edge_entry *, struct link_entry *);</term>

          <listitem>
            <para>This callback copies the link quality information from a
            link entry to a tc_edge_entry. This happens, if a HELLO message
            was received. Since the data structures have a different
            representation, this function is used to convert the
            representations.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*copy_link_lq_into_neighbor) (struct lq_hello_neighbor
          *, struct link_entry *);</term>

          <listitem>
            <para>This callback copies the link quality information from a
            link_entry to a lq_hello_neighbor.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*clear_link_entry) (struct link_entry *);</term>

          <listitem>
            <para>...</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*clear_lq_hello_neighbor) (struct lq_hello_neighbor
          *);</term>

          <listitem>
            <para>...</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*clear_tc_mpr_addr) (struct tc_mpr_addr *);</term>

          <listitem>
            <para>...</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>void (*clear_tc_edge_entry) (struct tc_edge_entry *);</term>

          <listitem>
            <para>...</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>int (*serialize_hello_lq) (unsigned char *, struct
          lq_hello_neighbor *);</term>

          <listitem>
            <para>This callback is triggered whenever a LQ message needs to be
            de-serialized The callback reads the message information of a
            binary packet and writes into an neighbour buffer.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>int (*serialize_tc_lq) (unsigned char *, struct tc_mpr_addr
          *);</term>

          <listitem>
            <para>This callback is triggered whenever a TC message needs to be
            de-serialized The callback reads the message information of a
            binary packet and writes into an MPR buffer.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>char *(*print_link_entry_lq) (struct link_entry *, char ,
          struct lqtextbuffer *);</term>

          <listitem>
            <para>This callback is triggered whenever any other part of the
            code wants to convert your internal metric representation of
            HELLO-determined links into a printable version. The callback may
            be called at any time.</para>

            <para><parameter>ptr</parameter> is a void pointer to the link
            quality data in the Hello DB. <parameter>seperator</parameter> is
            a character which is printed whenever there are multiple values
            (for example <quote>,</quote> or <quote>/</quote>).
            <parameter>buffer</parameter> is the buffer you want to
            <function>sprintf</function> into. Please do not forget to zero
            terminate the return value. The callback returns the buffer in
            case of errors. Please return <literal>"error"</literal> as const
            string, because <function>print_hello_lq</function> will often
            directly be put into a <function>printf("%s")</function>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>char *(*print_tc_edge_entry_lq) (struct tc_edge_entry *, char
          , struct lqtextbuffer *);</term>

          <listitem>
            <para>Same as <function>print_link_entry_lq</function>, but for an
            entry from the TC database.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>char *(*print_cost) (olsr_linkcost cost, struct lqtextbuffer
          *);</term>

          <listitem>
            <para>Same as <function>print_link_entry_lq</function>, but for an
            arbitrary link cost element.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>size_t size_tc_edge;</term>

          <listitem>
            <para>Set to a value larger that zero to reserve extra memory in
            the hello database.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>size_t size_tc_mpr_addr;</term>

          <listitem>
            <para>Set to a value larger that zero to reserve extra memory in
            the MPR database.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>size_t size_lq_hello_neighbor;</term>

          <listitem>
            <para>Set to a value larger that zero to reserve extra memory in
            the LQ database.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>size_t size_link_entry;</term>

          <listitem>
            <para>Set to a value larger that zero to reserve extra memory in
            the link database.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>uint8_t messageid_hello;</term>

          <listitem>
            <para>Determines the binary value for the OLSR message type used
            for HELLO messages.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>uint8_t messageid_tc;</term>

          <listitem>
            <para>Determines the binary value for the OLSR message type used
            for TC messages.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect1>

    <refsect1>
      <title>See Also</title>

      <simplelist type="inline">
        <member><xref endterm="olsrd_8-title" linkend="olsrd_8" /> <xref
        endterm="olsrd_conf_5-title" linkend="olsrd_conf_5" /></member>
      </simplelist>
    </refsect1>
  </refentry>

  <refentry id="olsrd_history_5">
    <indexterm>
      <primary><productname>olsrd-history</productname></primary>
    </indexterm>

    <refentryinfo>
      <titleabbrev><productname>olsrd</productname> Project
      History</titleabbrev>

      <authorgroup>
        <author>
          <firstname>Sven-Ola Tücke</firstname>

          <email>sven-olaægmx.de</email>
        </author>
      </authorgroup>
    </refentryinfo>

    <refmeta>
      <refentrytitle id="olsrd_history_5-title">olsrd-history</refentrytitle>

      <manvolnum>5</manvolnum>
    </refmeta>

    <refnamediv>
      <refname>olsrd-history</refname>

      <refpurpose>A brief summary of the <productname>olsrd</productname>
      project history</refpurpose>
    </refnamediv>

    <refsect1>
      <title>HISTORY (CITED FROM A.TØNNESEN MASTER THESIS, AUG 2004)</title>

      <para>Work on the olsrd implementation was started spring 2003. At first
      the plan was to add and experiment with MID functionality in the
      existing draft3[1] compatible OLSR implementation by INRIA[2]. This was
      completed by summer 2003. This means that much olsrd code originally was
      based on the INRIA implementation. But since then, close to all code has
      been rewritten or heavily modified. Olsrd is therefore considered an
      independent OLSR implementation and not just an extension to the INRIA
      implementation. [...]</para>

      <para>In October 2003 RFC3626 was released and now full RFC compliance
      became the goal of the project. In November 2003 UniK olsrd version
      0.2.0 was made public available through a website. But full RFC core
      compliance was not reached until release 0.3.8 in January 2004. Not much
      later 0.4.0 was released. It covered all auxiliary functionality as
      well, except link-layer notifications. [...]</para>

      <variablelist>
        <varlistentry>
          <term>Andreas Tønnesen <email>andretoæolsr.org</email></term>

          <listitem>
            <para>Active 2003-2006: Funder of the project, active contributor
            and maintainer until 2007, still owning the domain olsr.org. Also
            created the dotdraw, dyn_gw, httpinfo, and secure plugins. While
            Andreas Tønnesen published the original implementation under
            GPLv2, he as well as all other contributors switched to BSD in Nov
            2004.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>[1]
      http://hipercom.inria.fr/olsr/draft-ietf-manet-olsr-03.txt</para>

      <para>[2] http://hipercom.inria.fr/olsr/#code</para>
    </refsect1>

    <refsect1>
      <title>FURTHER HISTORY (WOS-03 TO OLSRD-NG)</title>

      <para>In Juli 2004, Andreas Tønnesen presented his implementation on the
      Wizards of OS 03[3] conference in Berlin. He met a couple of free public
      network activists from the C-Base[4] / Freifunk[5] community. While some
      of them tried to test wireless mobility cycling around the conference
      center with a moped, others established a general agreement of
      cooperation. This leads to several contributors to jump in, namely
      (AFAICR, please add yourself if your name is missing or sort the list if
      you think you're in the wrong position):</para>

      <variablelist>
        <varlistentry>
          <term>Thomas Lopatic <email>thomasælopatic.de</email></term>

          <listitem>
            <para>Active 2004-2007: Implemented the Link Quality Extensions
            (ETX), solved lots of implementation issues, created the Windows
            GUI and maintained the olsrd code base as well.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Bruno Randolf <email>br1æeinfach.org</email></term>

          <listitem>
            <para>Active 2004-2005: Solved lots of wireless driver/hardware
            issues, contributed to olsrd implementation (fixes, cleanups),
            contributed to TAS and Dotdraw plugins, created the nameservice
            plugin. Also wrotes the related horst[6] tool.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Sven-Ola Tücke <email>sven-olaægmx.de</email></term>

          <listitem>
            <para>Active 2004-[...]: Started the olsrd-based Freifunk
            Firmware[7] in late 2004, contributed bug fixes and maintenance
            (general and Windows), the dyn_gw_plain and arprefresh plugins.
            Contiued work for olsrd-ng (see below): Fixes &amp; maint, FPM,
            config parser, and documentation.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Jens Nachtigall <email>nachtigallæweb.de</email></term>

          <listitem>
            <para>Active 2004-2005: Contributed bug fixes, contributed to
            dyn_gw plugin and nameservice plugins.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Corinna 'Elektra' Aichele
          <email>onelektraægmx.net</email></term>

          <listitem>
            <para>Active 2004-2006: Contributed ideas and valuable comments,
            also initiated the fish-eye routing scheme.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Erik Tromp <email>erik.trompænl.thalesgroup.com</email></term>

          <listitem>
            <para>Active 2006-[...]: Created the <ulink
            url="http://sourceforge.net/projects/olsr-bmf/">BMF</ulink> (Basic
            Multicast Forwarding) plugin.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Lorenz Schori <email>lorenz.schoriægmx.ch</email></term>

          <listitem>
            <para>Active 2006-[...]: Created the txtinfo plugin and
            contributed bug fixes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>John Hay <email>jhayæmeraka.org.za</email></term>

          <listitem>
            <para>Active 2006-2008: Contributed maintenance and bug fixes for
            IPv6.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Immo 'FaUl' Wehrenberg
          <email>immoæchaostreff-dortmund.de</email></term>

          <listitem>
            <para>Active 2006-2008: Contributed the quagga plugin.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Vasilis Tsiligiannis <email>acinonyxsæyahoo.gr</email></term>

          <listitem>
            <para>Active 2007-[...]: Fixes and maint for the quagga
            plugin.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>[3] http://www.wizards-of-os.org/archiv/wos_3.html</para>

      <para>[4] http://www.c-base.org/</para>

      <para>[5] http://www.freifunk.net/</para>

      <para>[6] http://br1.einfach.org/horst</para>

      <para>[7] http://ff-firmware.sourceforge.net/</para>
    </refsect1>

    <refsect1>
      <title>OLSRD-NG HISTORY (STILL ACTIVE)</title>

      <para>In late 2006, the Vienna based Funkfeuer[8] community managed to
      get some sponsoring from IPA[9]. They established the OLSRD-NG project
      which should basically lead to a much larger node count and better code
      quality (see Funkfeuer Wiki on OLSRD-NG[10]). This in turn attracts new
      developers for the somewhat silenced team from there on:</para>

      <variablelist>
        <varlistentry>
          <term>Aaron Kaplan <email>aaronælo-res.org</email></term>

          <listitem>
            <para>Active 2005-[...]: Initiator/Coordinator of the OLSRD-NG
            project, contributed bug fixes (BSD, MacOS) and
            documentation.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Bernd Petrovitsch <email>berndæfirmix.at</email></term>

          <listitem>
            <para>Active 2006-[...]: Patch-juggler for the olsrd repository,
            rewrote the build system (Makefiles) and plugin subsystem,
            generalized commonly used code and functions, also lots of code
            base maintenance and bug fixes as well.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Hannes Gredler <email>hannesægredler.at</email></term>

          <listitem>
            <para>Active 2007-[...] Contributed the SPF refactoring (routing
            code optimization), code refactorings for scheduler and nearly all
            internal data structures, code base maintenance and bug fixes.
            Currently also hosts the mercurial repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Henning Rogge <email>roggeæfgan.de</email></term>

          <listitem>
            <para>Active 2008-[...]: Reworked the LQ/ETX algorithm,
            contributed the netsimcap (network simulation, GPL), changed
            logging and data structures, also lots of code base maintenance
            and bug fixes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Thomas Martin
          <email>thomas.martinærohde-schwarz.com</email></term>

          <listitem>
            <para>Active 2008: Provided VxWorks branch[11]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Markus Kittenberger
          <email>Markus.Kittenbergerægmx.at</email></term>

          <listitem>
            <para>Active 2008-[...]: Policy routing changes.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>Contributors are simply mentioned in chronological order - which
        does not imply any other rating. If you want your name mentioned also,
        please add to <filename>files/olsrd-manpages.xml</filename> which is
        the source for the <filename>HISTORY</filename> file.</para>
      </note>

      <para>[8] http://www.funkfeuer.at/</para>

      <para>[9] http://www.netidee.at/</para>

      <para>[10] http://wiki.funkfeuer.at//index.php/Olsrd-ng</para>

      <para>[11] http://gredler.at/hg/olsrd-vxworks</para>
    </refsect1>

    <refsect1>
      <title>LICENSING SUMMARY</title>

      <para>While the overall project is now (early-2009) licensed under the
      revised BSD license (without the <quote>obnoxious BSD advertising
      clause</quote>), licensing differs for some modules and files. This list
      is for informal purposes only - please refer to the respective files,
      persons, and legal bodies if you need verified licensing
      information.</para>

      <variablelist>
        <varlistentry>
          <term>Overall olsrd project</term>

          <listitem>
            <para>Licensed under revised BSD (2004, Andreas Tønnesen and
            Thomas Lopatic, olsr.org)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>contrib/netsimcap/</term>

          <listitem>
            <para>Licensed under GPLv3 (2008, Henning Rogge)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>gui/linux-gtk/</term>

          <listitem>
            <para>Licensed under GPLv2 (2003, Andreas Tønnesen)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lib/secure/src/md5.h</term>

          <listitem>
            <para>Licensed under some homebrew public domain (1991, RSA Data
            Security, Inc.)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lib/bmf/</term>

          <listitem>
            <para>Licensed under revised BSD, (2005, Erik Tromp, Thales
            Communications, Huizen, The Netherlands)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>lib/quagga/</term>

          <listitem>
            <para>Licensed under GPLv2 or LGPLv2 (2006, Immo 'FaUl' Wehrenberg
            and 2007 Vasilis Tsiligiannis)</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>As a note to future contributors: As of Jan-2009, we removed
      single person names from the copyright comments with the permission of
      the original authors (with the exception of above modules and 6 files
      under src/ created by Bernd Petrovitsch). If you contribute new files to
      the repository, please add a copy of the license.txt file as comment. If
      you send in patches, please add a signed-off-by[12] statement to
      express, that your patch is properly licensed. If you add a new plugin,
      you may choose another license (see quagga, bmf). Please make sure your
      license is compatible to olsrd, otherwise do not add to the repository.
      To prevent automatic re-licensing, add your exception to the
      <filename>license.sh</filename> script file also. IANAL clause:
      absolutely no warranty for the above information, please ask your
      favorite lawyer if you have any licensing questions or issues.</para>

      <para>[12]
      http://www.kernel.org/pub/linux/utils/util-linux-ng/README.devel</para>
    </refsect1>

    <refsect1>
      <title>See Also</title>

      <simplelist type="inline">
        <member><xref endterm="olsrd_8-title" linkend="olsrd_8" /> <xref
        endterm="olsrd_conf_5-title" linkend="olsrd_conf_5" /></member>
      </simplelist>
    </refsect1>
  </refentry>
</article>
